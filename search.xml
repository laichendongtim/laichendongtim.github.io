<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>零基础小白利用 Github 搭建教程</title>
      <link href="/2020/06/13/xin-shou-jiao-cheng/"/>
      <url>/2020/06/13/xin-shou-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><p>  一直想建立一个博客，记录自己的成长历程。大概一年以前，自己通过网络教程，学习如何购买域名和服务器，折腾了快一周的时间。搭建起一个简易的博客网站。本来一开始豪情万丈的去学习HTML、JAVASCRIPT以及CSS，学到一半后发现 ，这里面涉及到的内容，简直无比庞大，这让我感到绝望。于是乎，利用<strong>Wordpress</strong>快速搭建一个网站框架，成为了我博客的实现方式。</p><p>   但是，后面涉及到网站的维护工作，使得我的博客逐渐被搁置了下来。直到最近，域名网站提示我需要续费了，才想起个人博客尚处于初级阶段。烂摊子摆在那了，就基本没什么动力去收拾了。</p><p> 这时候，基于开源框架搭建博客映入我的眼帘。将其 在 <strong>github page</strong> 平台上托管，就可以实现基本的博客操作了。目前我搭建的博客是利用   <strong>github</strong> 上 <strong>fork</strong>的 开源文件，基于hexo搭建而成，这里由衷感谢 <em>洪卫</em>  提供的 <a href="https://sunhwee.com/posts/6e8839eb.html#toc-heading-15" target="_blank" rel="noopener">博客搭建教程</a> ，使得本博客能够顺利搭建。如果觉得本教程没有让你得到收获，可以点击链接，参考他的教程。</p><p>我也属于学习阶段，将自己的经验分享给大家，本教程会持续不断更新，欢迎大家提出指导意见。</p><h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><h2 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1.安装Git"></a>1.安装Git</h2><hr><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。Git非常强大，我觉得建议每个人都去了解一下。廖雪峰老师的<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">Git教程</a>写的非常好，大家可以了解一下。</p><p>windows：到git官网上下载,<a href="https://gitforwindows.org/" target="_blank" rel="noopener">Download git</a>,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。</p><h2 id="2-安装nodejs"><a href="#2-安装nodejs" class="headerlink" title="2. 安装nodejs"></a>2. 安装nodejs</h2><hr><p>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。</p><p>windows：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">nodejs</a>选择LTS版本就行了。</p><h2 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3.安装hexo"></a>3.安装hexo</h2><hr><p>首先一个新建文件夹  <strong>blog</strong>（什么名字都可以），右键点击文件夹，选中 <u>Git Bash  Here</u> 进入操作界面。打 开 git 控制台，之后的操作都在这里面进行。</p><p>（1）首先输入 以下代码，回车</p><pre class="line-numbers language-git"><code class="language-git">npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里说一下，博客中的代码块里面的内容，都是可以直接复制的，不会有格式问题。注意一点哦， git 的操作界面里，粘贴不再是 <code>Ctrl +c</code> ，而是 <code>Insert</code> 。</p><p>（2）初始化博客文件夹</p><pre><code>hexo init </code></pre><p>初始化成功之后，操作窗口提示：<strong>INFO Start blogging with hexo!</strong>        即为创建成功</p><p>（3）安装必要组件</p><pre><code>npm install </code></pre><p>目前，在你新建的文件夹 <strong>blog</strong>之中，有以下几个项目</p><ul><li><p><code>node_modules:</code> 依赖包</p></li><li><p><code>scaffolds：</code>生成文章的一些模板</p></li><li><p><code>source：</code>用来存放你的文章</p></li><li><p><code>themes：</code>主题文件</p></li><li><p><code>_config.yml:</code> 博客的配置文件</p></li></ul><p>（4） 生成静态网页，并显示在本地服务器上</p><pre class="line-numbers language-git"><code class="language-git">hexo ghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后浏览器打开<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 就可以看到一个博客的雏形了。如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="F:%5CBLOG%5Csource_posts%5C%E6%96%B0%E6%89%8B%E6%95%99%E7%A8%8B%5C1.png" alt=""></p><p>记得看完之后，<code>Ctrl +c</code>  关闭服务器</p><h2 id="4-Github创建个人仓库并关联博客"><a href="#4-Github创建个人仓库并关联博客" class="headerlink" title="4.Github创建个人仓库并关联博客"></a>4.Github创建个人仓库并关联博客</h2><p> （1）仓库创建</p><p> 关于注册Github的教程就不在这里说明了，网上有很多教程的。</p><p> 打开<a href="https://github.com/，新建一个项目仓库`New" target="_blank" rel="noopener">https://github.com/，新建一个项目仓库`New</a> repository`</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="F:%5CBLOG%5Csource_posts%5C%E6%96%B0%E6%89%8B%E6%95%99%E7%A8%8B%5C2.png" alt=""></p><p>之后按照如图所示填写</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="F:%5CBLOG%5Csource_posts%5C%E6%96%B0%E6%89%8B%E6%95%99%E7%A8%8B%5C3.png" alt=""></p><p>仓库的名字，一定是你自己的GitHub名称加上 <code>github.io</code> 否则无法在你的仓库创建博客</p><p>比如我的GitHub名称 是 <code>laichendongtim</code>，那么关联博客的仓库名称就是 <code>laichendongtim.github.io</code></p><p>上面报错的原因，是因为我已经创建了这个仓库。</p><p>（2）生成SSH添加到GitHub</p><p>还是之前的git 窗口命令行，输入</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"yourname"</span><span class="token function">git</span> config --global user.email <span class="token string">"youremail"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后创建SSH，一路回车</p><blockquote><p><code>ssh</code>，简单来讲，就是一个秘钥，其中，<code>id_rsa</code>是你这台电脑的私人秘钥，不能给别人看的，<code>id_rsa.pub</code>是公共秘钥，可以随便给别人看。把这个公钥放在<code>GitHub</code>上，这样当你链接<code>GitHub</code>自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过<code>git</code>上传你的文件到<code>GitHub</code>上。</p></blockquote><p>输入</p><pre class="line-numbers language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"youremail"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后找到你的专属 SSH，输入</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>复制输出的内容</p><p>打开 GitHub ，右上角头像点开<code>--&gt;setting--&gt;SSH and GPG keys</code> 。新建一个<code>SSH</code>，将复制的SSH，粘贴到 <code>key</code> 中，名称随意。</p><p>（3）关联本地文件夹</p><p>输入</p><pre class="line-numbers language-git"><code class="language-git">ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果出现你的用户名，那就成功了。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="F:%5CBLOG%5Csource_posts%5C%E6%96%B0%E6%89%8B%E6%95%99%E7%A8%8B%5C4.png" alt=""></p><p>（4）将本地仓库的文件部署到GitHub上</p><p>输入以下代码，安装部署模块</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>打开博客根目录下的<code>_config.yml</code>文件，这是博客的配置文件，在这里你可以修改与博客配置相关的各种信息。</p><p>修改最后一行的配置：</p><pre class="line-numbers language-yml"><code class="language-yml">deploy:  type: git  repository: https://github.com/laichendongtim/laichendongtim.github.io  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>repository</code>修改为你自己的<code>github</code>项目地址即可，就是部署时，告诉工具，将生成网页通过<code>git</code>方式上传到你对应的链接仓库中。</p><p>输入三连操作：</p><pre class="line-numbers language-git"><code class="language-git">hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>对应 清除——生成——部署 博客，这三个操作以后将经常用到，请牢记</p><p>这时候，可能需要你输入GitHub的用户名和密码。</p><p>完成之后，操作台出现 <code>INFO Deploy done: git</code>  就证明你的博客部署好啦</p><p>浏览器输入：<a href="http://yourname.github.io" target="_blank" rel="noopener">http://yourname.github.io</a> ，即可进入创建的博客了</p><h2 id="5、下载Markdown编译器"><a href="#5、下载Markdown编译器" class="headerlink" title="5、下载Markdown编译器"></a>5、下载Markdown编译器</h2><p>博客文件一般是 <code>.md</code>文件，是基于Markdown语言编写的。一般的<code>.md</code>都能用 电脑自带的<strong>记事本</strong>打开，但是这里不推荐，因为 <strong>记事本</strong>采用的编码模式是十六进制，而目前流行采用的是 <strong>UTF-8</strong>编码模式，前者无法支持中文，后者支持全球绝大多数语言。主要是担心格式不符合，产生乱码</p><p><strong>Markdown</strong>语法较为简单，可以说是一款简单版本的 <strong>Word</strong>。那我们为啥不直接用<strong>Word</strong>来写博客呢，正因为<strong>Word</strong>太强大了，导致功能赘余，不适用于写博客。</p><p>闲话说完，给大家推荐一款免费而且好用 <strong>Markdown</strong>编译器 ——<code>Typora</code>。传送门 <a href="https://typora.io/" target="_blank" rel="noopener">Typora下载</a></p><p>这款编译器风格简洁，能够可以直接编辑 <code>.md</code>文件，不用懂<strong>Markdown</strong>语法。当然，如果你习惯使用<strong>Markdown</strong>语言，<code>Ctrl+/</code>即可切换。用了都说好</p><h1 id="二、完善你的博客"><a href="#二、完善你的博客" class="headerlink" title="二、完善你的博客"></a>二、完善你的博客</h1><p>看到这里，基本上博客已经完成的差不多了，但是一眼看上去，还是不太美观，所以，这里需要利用到博客主题。想要从头开始，可以去前面 <strong>洪卫的博客</strong> 传送门，进一步学习。这里将讲述，如何利用别人的开源博客搭建自己 的博客，毕竟人的精力是有限的嘛。</p><h2 id="1、下载模板"><a href="#1、下载模板" class="headerlink" title="1、下载模板"></a>1、下载模板</h2><p><a href="https://github.com/laichendongtim/blog-core-code" target="_blank" rel="noopener"> 源代码</a>  放在这里了，大家直接点右上角绿色的 <code>clone or download</code> 下载就好，记得 fork 支持一下哦</p><h2 id="2、导入仓库"><a href="#2、导入仓库" class="headerlink" title="2、导入仓库"></a>2、导入仓库</h2><p>直接将下载的压缩包解压后，复制粘贴到你之前创建的博客目录之中覆盖就好。</p><h2 id="3、修改参数"><a href="#3、修改参数" class="headerlink" title="3、修改参数"></a>3、修改参数</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> technology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/06/11/hello-world/"/>
      <url>/2020/06/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
