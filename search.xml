<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>利用pygame开发飞机大战游戏</title>
      <link href="/2020/07/11/fly/"/>
      <url>/2020/07/11/fly/</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p> 作为python学习的练手项目之一，飞机大战可谓是经典案例了。内容丰富有趣，难度适中，适合初学者作为学习一定阶段的检测工具。网上的资料有很多，但是我还是想把自己做这个项目时候的经验分享给大家。也算是一个总结，毕竟稳固而知新。</p><h2 id="二、分析模型"><a href="#二、分析模型" class="headerlink" title="二、分析模型"></a>二、分析模型</h2><p>  我们如果没有框架来构造一个项目的时候，需要从头开始考虑这个项目结构。将整个难以实现的目标拆分成许多可以实现的小目标。</p><h3 id="1、游戏结构"><a href="#1、游戏结构" class="headerlink" title="1、游戏结构"></a>1、游戏结构</h3><p>拿飞机大战举例，作为一个游戏，它分为两个部分，一个是游戏的初始化，另一个是游戏的循环。</p><table><thead><tr><th align="center">游戏初始化</th><th align="center">游戏循环</th></tr></thead><tbody><tr><td align="center">设置游戏窗口</td><td align="center">设置刷新帧率</td></tr><tr><td align="center">绘制图像初始位置</td><td align="center">检测用户交互</td></tr><tr><td align="center">设置游戏时钟</td><td align="center">更新所有图像位置</td></tr><tr><td align="center"></td><td align="center">更新屏幕显示</td></tr></tbody></table><p>游戏初始化不难理解，一个游戏有基本的界面，必定涉及到初始化的显示问题，而飞机大战游戏的初始化，就包含了其中三个内容：设置游戏窗口、绘制图像初始位置以及设置游戏时钟</p><p>游戏循环呢，相当于一个程序正在运行，我们想要他一直正常运行下去，就必须要设定循环，使之不断运行，当外界条件触发，结束运行。说白了，玩游戏也是运行程序的一个过程。其中包含设置刷新帧率、检测用户交互、更新所有图像位置以及更新屏幕显示。要说明的是，刷新帧率这个词。游戏中的动画效果，本质上是快速的在屏幕上绘制图像，产生连贯的视觉效果，每次绘制的结果被称为<code>帧</code></p><h3 id="2、游戏内容"><a href="#2、游戏内容" class="headerlink" title="2、游戏内容"></a>2、游戏内容</h3><p>飞机大战主要目标（对象）有哪些？背景、我方战机、敌方战机、子弹。</p><p>看下来其实并没有多复杂，创建上述对象的过程无非是利用 pygame中自带的类来创建相应的对象。本次用到的是Sprite类。我们看一下他的定义</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""simple base class for visible game objects    pygame.sprite.Sprite(*groups): return Sprite    The base class for visible game objects. Derived classes will want to    override the Sprite.update() method and assign Sprite.image and Sprite.rect    attributes.  The initializer can accept any number of Group instances that    the Sprite will become a member of.    When subclassing the Sprite class, be sure to call the base initializer    before adding the Sprite to Groups.    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>groups<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__g <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># The groups the sprite is in</span>        <span class="token keyword">if</span> groups<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token operator">*</span>groups<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>groups<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""add the sprite to groups        Sprite.add(*groups): return None        Any number of Group instances can be passed as arguments. The        Sprite will be added to the Groups it is not already a member of.        """</span>        has <span class="token operator">=</span> self<span class="token punctuation">.</span>__g<span class="token punctuation">.</span>__contains__        <span class="token keyword">for</span> group <span class="token keyword">in</span> groups<span class="token punctuation">:</span>            <span class="token keyword">if</span> hasattr<span class="token punctuation">(</span>group<span class="token punctuation">,</span> <span class="token string">'_spritegroup'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token operator">not</span> has<span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">:</span>                    group<span class="token punctuation">.</span>add_internal<span class="token punctuation">(</span>self<span class="token punctuation">)</span>                    self<span class="token punctuation">.</span>add_internal<span class="token punctuation">(</span>group<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token operator">*</span>group<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">remove</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>groups<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""remove the sprite from groups        Sprite.remove(*groups): return None        Any number of Group instances can be passed as arguments. The Sprite        will be removed from the Groups it is currently a member of.        """</span>        has <span class="token operator">=</span> self<span class="token punctuation">.</span>__g<span class="token punctuation">.</span>__contains__        <span class="token keyword">for</span> group <span class="token keyword">in</span> groups<span class="token punctuation">:</span>            <span class="token keyword">if</span> hasattr<span class="token punctuation">(</span>group<span class="token punctuation">,</span> <span class="token string">'_spritegroup'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> has<span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">:</span>                    group<span class="token punctuation">.</span>remove_internal<span class="token punctuation">(</span>self<span class="token punctuation">)</span>                    self<span class="token punctuation">.</span>remove_internal<span class="token punctuation">(</span>group<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token operator">*</span>group<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">add_internal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> group<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__g<span class="token punctuation">[</span>group<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">remove_internal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> group<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">del</span> self<span class="token punctuation">.</span>__g<span class="token punctuation">[</span>group<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""method to control sprite behavior        Sprite.update(*args):        The default implementation of this method does nothing; it's just a        convenient "hook" that you can override. This method is called by        Group.update() with whatever arguments you give it.        There is no need to use this method if not using the convenience        method by the same name in the Group class.        """</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">kill</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""remove the Sprite from all Groups        Sprite.kill(): return None        The Sprite is removed from all the Groups that contain it. This won't        change anything about the state of the Sprite. It is possible to        continue to use the Sprite after this method has been called, including        adding it to Groups.        """</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> self<span class="token punctuation">.</span>__g<span class="token punctuation">:</span>            c<span class="token punctuation">.</span>remove_internal<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__g<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">groups</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""list of Groups that contain this Sprite        Sprite.groups(): return group_list        Returns a list of all the Groups that contain this Sprite.        """</span>        <span class="token keyword">return</span> list<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__g<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">alive</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""does the sprite belong to any groups        Sprite.alive(): return bool        Returns True when the Sprite belongs to one or more Groups.        """</span>        <span class="token keyword">return</span> truth<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__g<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"&lt;%s sprite(in %d groups)>"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__g<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可谓是五脏俱全了，该有的函数都有了。我们只需要以此作为父类，派生出相应的子类即可。</p><h2 id="三、构造函数"><a href="#三、构造函数" class="headerlink" title="三、构造函数"></a>三、构造函数</h2><h3 id="1-游戏函数框架构造"><a href="#1-游戏函数框架构造" class="headerlink" title="1.游戏函数框架构造"></a>1.游戏函数框架构造</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">PlaneGame</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""main"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"游戏初始化"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>screen <span class="token operator">=</span> pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>set_mode<span class="token punctuation">(</span>SCREEN_RECT<span class="token punctuation">.</span>size<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># create game win 480*700</span>        self<span class="token punctuation">.</span>clock <span class="token operator">=</span> pygame<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Clock<span class="token punctuation">(</span><span class="token punctuation">)</span>                          <span class="token comment" spellcheck="true"># creat game clock</span>        self<span class="token punctuation">.</span>_creat_sprites<span class="token punctuation">(</span><span class="token punctuation">)</span>        pygame<span class="token punctuation">.</span>time<span class="token punctuation">.</span>set_timer<span class="token punctuation">(</span>CREATR_ENEMY_EVENT<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先创建一个 名字为<code>fly_main.py</code>的python文件，在其中创建 <code>PlaneGame</code>的一个主函数类，我们所有的主要功能都在里面实现。</p><p>初始化过程中，在创建这个类的时候 即 <code>def __init__(self):</code>中就包含游戏的窗口创建、时钟创建、精灵（sprites）创建和定时器。</p><p>然后在代码的下方分别加入以下函数</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_creat_sprites</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#创建精灵 ：创建背景、我方战机、敌方战机</span><span class="token keyword">def</span> <span class="token function">start_game</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true">#开始游戏 ：建立循环 设置刷新帧率刷新帧率、检测用户交互、更新所有图像位置                                      以及更新屏幕显示</span><span class="token keyword">def</span> <span class="token function">__event_handler</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#事件监听 ：检测键盘操作</span><span class="token keyword">def</span> <span class="token function">__check_collide</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#碰撞检测 ：检测敌机与我方是否碰撞</span><span class="token keyword">def</span> <span class="token function">__update_sprite</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#更新绘制精灵组 </span><span class="token keyword">def</span> <span class="token function">_game_over</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true">#结束游戏 ：退出循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-游戏对象创建"><a href="#2-游戏对象创建" class="headerlink" title="2.游戏对象创建"></a>2.游戏对象创建</h3><p>创建<code>fly_sprite.py</code>的文件，在其中创建基于sprite的类的game类</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">GameSprite</span><span class="token punctuation">(</span>pygame<span class="token punctuation">.</span>sprite<span class="token punctuation">.</span>Sprite<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""飞机大战游戏精灵"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> image_name<span class="token punctuation">,</span> speed<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 调用父类初始化方法</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 定义对象属性</span>        self<span class="token punctuation">.</span>image <span class="token operator">=</span> pygame<span class="token punctuation">.</span>image<span class="token punctuation">.</span>load<span class="token punctuation">(</span>image_name<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>rect <span class="token operator">=</span> self<span class="token punctuation">.</span>image<span class="token punctuation">.</span>get_rect<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>speed <span class="token operator">=</span> speed    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>y <span class="token operator">+=</span> self<span class="token punctuation">.</span>speed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到初始化过程中，包含载入图像、获取图像位置以及设置图像的运动速度。</p><p>图像的压缩包会在文章结尾给出，默认图像的运动速度为1</p><p>在此基础上，调用父类，创建以下子类</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BackGround</span><span class="token punctuation">(</span>GameSprite<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""游戏背景精灵"""</span><span class="token keyword">class</span> <span class="token class-name">Enemy</span><span class="token punctuation">(</span>GameSprite<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""敌机精灵"""</span><span class="token keyword">class</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span>GameSprite<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""""英雄精灵"""</span><span class="token keyword">class</span> <span class="token class-name">Bullets</span><span class="token punctuation">(</span>GameSprite<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""""子弹精灵"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意一点，<code>fly_main.py</code>中使用<code>fly_sprite.py</code>的类和对象的时候记得引用 import 导入文件</p><h2 id="四、代码编写"><a href="#四、代码编写" class="headerlink" title="四、代码编写"></a>四、代码编写</h2><p>到目前为止，这个游戏的基本框架已经搭好，剩下的就是编写相关的代码，不断调试了。</p><p>注意一点：坐标轴原点是左上角，向下y轴数值增加，x轴向右数值增加。游戏中所有可见的元素都是用矩形区域描述的。（x,y）（宽，高）。</p><h3 id="1、游戏对象"><a href="#1、游戏对象" class="headerlink" title="1、游戏对象"></a>1、游戏对象</h3><p><code>fly_sprite.py</code>文件中，确定游戏区域</p><pre class="line-numbers language-python"><code class="language-python">SCREEN_RECT <span class="token operator">=</span> pygame<span class="token punctuation">.</span>Rect<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">,</span> <span class="token number">700</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 屏幕大小常量</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>游戏背景精灵：由于所给的图像和上述屏幕大小相比略小，我们需要用两张同样的图片拼接在一起，连续的移动就能使之成为动态的背景</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BackGround</span><span class="token punctuation">(</span>GameSprite<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""游戏背景精灵"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> is_alt<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token string">"./images/background.png"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> is_alt<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断是否是交替图像，如果是就交换位置</span>            self<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token operator">-</span>self<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>height    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>y <span class="token operator">>=</span> SCREEN_RECT<span class="token punctuation">.</span>height<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断是否移出屏幕，将图像设置到屏幕的上方</span>            self<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token operator">-</span>self<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>height<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>敌机精灵：由于敌机需要从屏幕上方出现，飞到下方消失，所以需要判断是否飞出屏幕，释放内存，不然产生的对象过多，会使得游戏“臃肿”。其次，想要敌机出现的位置不同，调用<code>random</code>函数，随机指定在屏幕内的位置。       </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Enemy</span><span class="token punctuation">(</span>GameSprite<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""敌机精灵"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token string">"./images/enemy1.png"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 调用父类方法，指定敌机图片</span>        self<span class="token punctuation">.</span>speed <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>bottom <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true"># 指定敌机初始位置</span>        max_x <span class="token operator">=</span> SCREEN_RECT<span class="token punctuation">.</span>width <span class="token operator">-</span> self<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>width        self<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>x <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> max_x<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 调用父类方法，保持垂直方向飞行</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>y <span class="token operator">>=</span> SCREEN_RECT<span class="token punctuation">.</span>height<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断是否飞出，释放内存</span>            self<span class="token punctuation">.</span>kill<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>英雄精灵：设置fire函数，调用子弹类。由于背景图像向下滚动设置，所有我方战机不用上下移动，只需要左右运动即可。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span>GameSprite<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""""英雄精灵"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token string">"./images/me1.png"</span><span class="token punctuation">,</span> speed<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 初始速度为禁止</span>        self<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>centerx <span class="token operator">=</span> SCREEN_RECT<span class="token punctuation">.</span>centerx        self<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>bottom <span class="token operator">=</span> SCREEN_RECT<span class="token punctuation">.</span>bottom <span class="token operator">-</span> <span class="token number">120</span>        self<span class="token punctuation">.</span>bullets <span class="token operator">=</span> pygame<span class="token punctuation">.</span>sprite<span class="token punctuation">.</span>Group<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建子弹精灵组</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>x <span class="token operator">+=</span> self<span class="token punctuation">.</span>speed  <span class="token comment" spellcheck="true"># 水平方向移动</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 英雄不能离开屏幕</span>            self<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>right <span class="token operator">></span> SCREEN_RECT<span class="token punctuation">.</span>right<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>right <span class="token operator">=</span> SCREEN_RECT<span class="token punctuation">.</span>right    <span class="token keyword">def</span> <span class="token function">fire</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            bullet <span class="token operator">=</span> Bullets<span class="token punctuation">(</span><span class="token punctuation">)</span>            bullet<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>bottom <span class="token operator">=</span> self<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>y <span class="token operator">-</span> i <span class="token operator">*</span> <span class="token number">20</span>  <span class="token comment" spellcheck="true"># 设置子弹位置</span>            bullet<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>centerx <span class="token operator">=</span> self<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>centerx            self<span class="token punctuation">.</span>bullets<span class="token punctuation">.</span>add<span class="token punctuation">(</span>bullet<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子弹精灵：子弹出现的位置，必须是在hero图像的正上方，且运动方式是从下至上。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Bullets</span><span class="token punctuation">(</span>GameSprite<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""""子弹精灵"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token string">"./images/bullet2.png"</span><span class="token punctuation">,</span> speed<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>bottom <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断子弹是否飞出屏幕</span>            self<span class="token punctuation">.</span>kill<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、主函数"><a href="#2、主函数" class="headerlink" title="2、主函数"></a>2、主函数</h3><p>创建精灵组和更新绘制精灵不再叙述，本质就是调用 创建的精灵类的更新和绘制函数。</p><p>这里着重说一下事件监听以及碰撞检测函数</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__event_handler</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>           <span class="token comment" spellcheck="true">#事件监听</span>    <span class="token keyword">for</span> event <span class="token keyword">in</span> pygame<span class="token punctuation">.</span>event<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#判断是否退出游戏</span>        <span class="token keyword">if</span> event<span class="token punctuation">.</span>type <span class="token operator">==</span> pygame<span class="token punctuation">.</span>QUIT<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"退出游戏"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>_game_over<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> event<span class="token punctuation">.</span>type<span class="token operator">==</span>CREATR_ENEMY_EVENT<span class="token punctuation">:</span>            enemy<span class="token operator">=</span>Enemy<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建敌机</span>            self<span class="token punctuation">.</span>enemy_group<span class="token punctuation">.</span>add<span class="token punctuation">(</span>enemy<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#使用键盘提供的方法获取键盘按键</span>    key_pressed<span class="token operator">=</span>pygame<span class="token punctuation">.</span>key<span class="token punctuation">.</span>get_pressed<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> key_pressed<span class="token punctuation">[</span>pygame<span class="token punctuation">.</span>K_RIGHT<span class="token punctuation">]</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>hero<span class="token punctuation">.</span>speed<span class="token operator">=</span><span class="token number">2</span>    <span class="token keyword">elif</span> key_pressed<span class="token punctuation">[</span>pygame<span class="token punctuation">.</span>K_LEFT<span class="token punctuation">]</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>hero<span class="token punctuation">.</span>speed<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span>    <span class="token keyword">elif</span> key_pressed<span class="token punctuation">[</span>pygame<span class="token punctuation">.</span>K_SPACE<span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#按下空格开火</span>        self<span class="token punctuation">.</span>hero<span class="token punctuation">.</span>fire<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>hero<span class="token punctuation">.</span>speed<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">def</span> <span class="token function">__check_collide</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#碰撞检测</span>    pygame<span class="token punctuation">.</span>sprite<span class="token punctuation">.</span>groupcollide<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hero<span class="token punctuation">.</span>bullets<span class="token punctuation">,</span>self<span class="token punctuation">.</span>enemy_group<span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#子弹摧毁敌机</span>    enemises<span class="token operator">=</span>pygame<span class="token punctuation">.</span>sprite<span class="token punctuation">.</span>spritecollide<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hero<span class="token punctuation">,</span>self<span class="token punctuation">.</span>enemy_group<span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#英雄碰撞敌机</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>enemises<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>hero<span class="token punctuation">.</span>kill<span class="token punctuation">(</span><span class="token punctuation">)</span>        PlaneGame<span class="token punctuation">.</span>_game_over<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>事件检测就是判断是否退出游戏，以及我们当前在键盘上的操作：左右移动以及发射子弹。</p><p>碰撞检测就是判断我方英雄是否与敌机相撞，二者之间的坐标重合即为相撞，随即调用game_over函数结束游戏。</p><p>相关代码以及图片已经放到 Github 上了，<a href="https://github.com/laichendongtim/fly" target="_blank" rel="noopener">传送门</a>。这里由衷感谢 黑马程序员提供的资料。</p><p>整个游戏较为简单，想要尝试添加新功能的小伙伴，可以继续在此基础上增加趣味性。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> technology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础小白利用 Github 搭建教程</title>
      <link href="/2020/06/11/newteach/"/>
      <url>/2020/06/11/newteach/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><p>  一直想建立一个博客，记录自己的成长历程。大概一年以前，自己通过网络教程，学习如何购买域名和服务器，折腾了快一周的时间。搭建起一个简易的博客网站。本来一开始豪情万丈的去学习HTML、JAVASCRIPT以及CSS，学到一半后发现 ，这里面涉及到的内容，简直无比庞大，这让我感到绝望。于是乎，利用<strong>Wordpress</strong>快速搭建一个网站框架，成为了我博客的实现方式。</p><p>   但是，后面涉及到网站的维护工作，使得我的博客逐渐被搁置了下来。直到最近，域名网站提示我需要续费了，才想起个人博客尚处于初级阶段。烂摊子摆在那了，就基本没什么动力去收拾了。</p><p> 这时候，基于开源框架搭建博客映入我的眼帘。将其 在 <strong>github page</strong> 平台上托管，就可以实现基本的博客操作了。目前我搭建的博客是利用   <strong>github</strong> 上 <strong>fork</strong>的 开源文件，基于hexo搭建而成，这里由衷感谢 <em>洪卫</em>  提供的 <a href="https://sunhwee.com/posts/6e8839eb.html#toc-heading-15" target="_blank" rel="noopener">博客搭建教程</a> ，使得本博客能够顺利搭建。如果觉得本教程没有让你得到收获，可以点击链接，参考他的教程。</p><p>我也属于学习阶段，将自己的经验分享给大家，本教程会持续不断更新，欢迎大家提出指导意见。</p><h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><h2 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1.安装Git"></a>1.安装Git</h2><hr><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。Git非常强大，我觉得建议每个人都去了解一下。廖雪峰老师的<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">Git教程</a>写的非常好，大家可以了解一下。</p><p>windows：到git官网上下载,<a href="https://gitforwindows.org/" target="_blank" rel="noopener">Download git</a>,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。</p><h2 id="2-安装nodejs"><a href="#2-安装nodejs" class="headerlink" title="2. 安装nodejs"></a>2. 安装nodejs</h2><hr><p>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。</p><p>windows：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">nodejs</a>选择LTS版本就行了。</p><h2 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3.安装hexo"></a>3.安装hexo</h2><hr><p>首先一个新建文件夹  <strong>blog</strong>（什么名字都可以），右键点击文件夹，选中 <u>Git Bash  Here</u> 进入操作界面。打 开 git 控制台，之后的操作都在这里面进行。</p><p>（1）首先输入 以下代码，回车</p><pre class="line-numbers language-git"><code class="language-git">npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里说一下，博客中的代码块里面的内容，都是可以直接复制的，不会有格式问题。注意一点哦， git 的操作界面里，粘贴不再是 <code>Ctrl +c</code> ，而是 <code>Insert</code> 。</p><p>（2）初始化博客文件夹</p><pre><code>hexo init </code></pre><p>初始化成功之后，操作窗口提示：<strong>INFO Start blogging with hexo!</strong>        即为创建成功</p><p>（3）安装必要组件</p><pre><code>npm install </code></pre><p>目前，在你新建的文件夹 <strong>blog</strong>之中，有以下几个项目</p><ul><li><p><code>node_modules:</code> 依赖包</p></li><li><p><code>scaffolds：</code>生成文章的一些模板</p></li><li><p><code>source：</code>用来存放你的文章</p></li><li><p><code>themes：</code>主题文件</p></li><li><p><code>_config.yml:</code> 博客的配置文件</p></li></ul><p>（4） 生成静态网页，并显示在本地服务器上</p><pre class="line-numbers language-git"><code class="language-git">hexo ghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后浏览器打开<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 就可以看到一个博客的雏形了。如下图所示</p><p><img src="https://s1.ax1x.com/2020/07/02/NL8Hwd.png" alt></p><p>记得看完之后，<code>Ctrl +c</code>  关闭服务器</p><h2 id="4-Github创建个人仓库并关联博客"><a href="#4-Github创建个人仓库并关联博客" class="headerlink" title="4.Github创建个人仓库并关联博客"></a>4.Github创建个人仓库并关联博客</h2><p> （1）仓库创建</p><p> 关于注册Github的教程就不在这里说明了，网上有很多教程的。</p><p> 打开<a href="https://github.com/，新建一个项目仓库`New" target="_blank" rel="noopener">https://github.com/，新建一个项目仓库`New</a> repository`</p><p><img src="https://s1.ax1x.com/2020/07/02/NLaOHO.png" alt></p><p>之后按照如图所示填写</p><p><img src="https://s1.ax1x.com/2020/07/02/NLdgGd.png" alt></p><p>仓库的名字，一定是你自己的GitHub名称加上 <code>github.io</code> 否则无法在你的仓库创建博客</p><p>比如我的GitHub名称 是 <code>laichendongtim</code>，那么关联博客的仓库名称就是 <code>laichendongtim.github.io</code></p><p>上面报错的原因，是因为我已经创建了这个仓库。</p><p>（2）生成SSH添加到GitHub</p><p>还是之前的git 窗口命令行，输入</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"yourname"</span><span class="token function">git</span> config --global user.email <span class="token string">"youremail"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后创建SSH，一路回车</p><blockquote><p><code>ssh</code>，简单来讲，就是一个秘钥，其中，<code>id_rsa</code>是你这台电脑的私人秘钥，不能给别人看的，<code>id_rsa.pub</code>是公共秘钥，可以随便给别人看。把这个公钥放在<code>GitHub</code>上，这样当你链接<code>GitHub</code>自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过<code>git</code>上传你的文件到<code>GitHub</code>上。</p></blockquote><p>输入</p><pre class="line-numbers language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"youremail"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后找到你的专属 SSH，输入</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>复制输出的内容</p><p>打开 GitHub ，右上角头像点开<code>--&gt;setting--&gt;SSH and GPG keys</code> 。新建一个<code>SSH</code>，将复制的SSH，粘贴到 <code>key</code> 中，名称随意。</p><p>（3）关联本地文件夹</p><p>输入</p><pre class="line-numbers language-git"><code class="language-git">ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果出现你的用户名，那就成功了。</p><p><img src="https://s1.ax1x.com/2020/07/02/NLdRxI.png" alt></p><p>（4）将本地仓库的文件部署到GitHub上</p><p>输入以下代码，安装部署模块</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>打开博客根目录下的<code>_config.yml</code>文件，这是博客的配置文件，在这里你可以修改与博客配置相关的各种信息。</p><p>修改最后一行的配置：</p><pre class="line-numbers language-yml"><code class="language-yml">deploy:  type: git  repository: https://github.com/laichendongtim/laichendongtim.github.io  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>repository</code>修改为你自己的<code>github</code>项目地址即可，就是部署时，告诉工具，将生成网页通过<code>git</code>方式上传到你对应的链接仓库中。</p><p>输入三连操作：</p><pre class="line-numbers language-git"><code class="language-git">hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>对应 清除——生成——部署 博客，这三个操作以后将经常用到，请牢记</p><p>这时候，可能需要你输入GitHub的用户名和密码。</p><p>完成之后，操作台出现 <code>INFO Deploy done: git</code>  就证明你的博客部署好啦</p><p>浏览器输入：<a href="http://yourname.github.io" target="_blank" rel="noopener">http://yourname.github.io</a> ，即可进入创建的博客了</p><h2 id="5、下载Markdown编译器"><a href="#5、下载Markdown编译器" class="headerlink" title="5、下载Markdown编译器"></a>5、下载Markdown编译器</h2><p>博客文件一般是 <code>.md</code>文件，是基于Markdown语言编写的。一般的<code>.md</code>都能用 电脑自带的<strong>记事本</strong>打开，但是这里不推荐，因为 <strong>记事本</strong>采用的编码模式是十六进制，而目前流行采用的是 <strong>UTF-8</strong>编码模式，前者无法支持中文，后者支持全球绝大多数语言。主要是担心格式不符合，产生乱码</p><p><strong>Markdown</strong>语法较为简单，可以说是一款简单版本的 <strong>Word</strong>。那我们为啥不直接用<strong>Word</strong>来写博客呢，正因为<strong>Word</strong>太强大了，导致功能赘余，不适用于写博客。</p><p>闲话说完，给大家推荐一款免费而且好用 <strong>Markdown</strong>编译器 ——<code>Typora</code>。传送门 <a href="https://typora.io/" target="_blank" rel="noopener">Typora下载</a></p><p>这款编译器风格简洁，能够可以直接编辑 <code>.md</code>文件，不用懂<strong>Markdown</strong>语法。当然，如果你习惯使用<strong>Markdown</strong>语言，<code>Ctrl+/</code>即可切换。用了都说好</p><h1 id="二、完善你的博客"><a href="#二、完善你的博客" class="headerlink" title="二、完善你的博客"></a>二、完善你的博客</h1><p>看到这里，基本上博客已经完成的差不多了，但是一眼看上去，还是不太美观，所以，这里需要利用到博客主题。想要从头开始，可以去前面 <strong>洪卫的博客</strong> 传送门，进一步学习。这里将讲述，如何利用别人的开源博客搭建自己 的博客，毕竟人的精力是有限的嘛。</p><h2 id="1、下载模板"><a href="#1、下载模板" class="headerlink" title="1、下载模板"></a>1、下载模板</h2><p><a href="https://github.com/laichendongtim/blog-core-code" target="_blank" rel="noopener"> 源代码</a>  放在这里了，大家直接点右上角绿色的 <code>clone or download</code> 下载就好，记得 fork 支持一下哦</p><h2 id="2、导入仓库"><a href="#2、导入仓库" class="headerlink" title="2、导入仓库"></a>2、导入仓库</h2><p>直接将下载的压缩包解压后，复制粘贴到你之前创建的博客目录之中覆盖就好。</p><h2 id="3、修改参数"><a href="#3、修改参数" class="headerlink" title="3、修改参数"></a>3、修改参数</h2><p>对于你制作的博客来说，最重要的两个文件，是以  <code>.yml</code>  结尾 的文件。一个在 博客的根目录下，我们后面称A文件；另一个在   <code>\themes\matery</code>    目录下，我们后面称之为 B文件</p><p>对于A文件 ，属于网页的首页配置 </p><pre><code>title: 赖宸东的博客subtitle: 赖宸东的博客description: 电子科技大学 | 武汉理工大学keywords: UESTCauthor: 赖宸东url: https://laichendongtim.github.iodeploy:- type: git  repo:    github:  https://github.com/laichendongtim/laichendongtim.github.io.git</code></pre><p>上述选项修改成个人信息即可。 注意  <strong>url 与 github</strong>  请修改成与该博客链接的地址，否则无法将本地数据上传到  <strong>Github</strong></p><p>对于B文件，是博客的个性化设置，包括菜单栏的设置、链接地址等</p><pre><code>socialLink:  qq: 1556838382  github: laichendongtim  weibo:  email: laichendongtim21@gmail.com  zhihu:</code></pre><p>上述选项修改成自己的个人链接即可，不填认为缺省状态，不显示。比如我目前填了 qq、GitHub、email 三项，首页出现的只有这三个对于的链接图标。其他参数可自定义修改。</p><h2 id="4、新建一个标准的博客"><a href="#4、新建一个标准的博客" class="headerlink" title="4、新建一个标准的博客"></a>4、新建一个标准的博客</h2><p>（1）右键选中博客文件夹  <u>Git Bash  Here</u>  进入操作界面</p><pre class="line-numbers language-git"><code class="language-git">hexo new post  <span class="token string">"你的文章的名称"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）此时，在你的 <code>\source\_posts</code>目录下，生成了 一个 “你的文章的名称”  对应的 .md文件和文件夹。用Typora 编辑 .md 文件，即可编写博客。生成的文件夹用来存放文章内的图片。</p><p>（3）生成的  .md 文件 分为 <strong>标注信息</strong>+<strong>正文</strong>。正文就是自己的博客内容了，而标注信息代表博客显示的信息<img src="https://s1.ax1x.com/2020/07/05/U992xH.png" alt></p><p>如图  title ——博客正文的题目，</p><p>​         date ——博客撰写日期 ，</p><p>​         author——作者，</p><p>​         img——博客显示的背景图片  </p><p>​         top——是否首页推荐显示</p><p>​         summary——首页显示的文章介绍，若缺省，则自动截取文章部分内容</p><p>​         tag——标签</p><p>​        categories——分类</p><p>一般这是新建的时候，自动生成的内容。如果想修改自动生成的 <strong>标注信息</strong>格式 ，修改 <code>\scaffolds</code>文件夹下的 post.md 文件即可。</p><p>（4）编辑博客少不了插入图片，Typora 支持插入相对路径和本地路径的图片，但可能在上传博客的时候发生图片丢失的情况，为简单解决这个问题 ，我们采用 网址导入的方式，即图床生成网址。和我一步一步操作即可</p><p>a. 进入 <a href="https://imgchr.com/" target="_blank" rel="noopener">路过图床</a>  ，该网站免费提供图床服务，利用邮箱注册即可</p><p>b. 将自己需要添加的图片 拖动至该网站（小于10M）</p><p>c. 在该网站的个人信息界面，点开自己刚刚上传的文件，里面有下拉选项 <strong>图片链接代码</strong></p><p>d.找到 <strong>Markdown</strong>链接，复制</p><p>c.直接在 Typora 编辑的.md文件中，粘贴。就能看到自己刚刚上传的照片了</p><p>这种方式比较简单，易于网站的维护。这样一篇图文并茂的博客就写好了。当然，关于Typora 的进阶操作，需要个人多加摸索，这里不再赘述。</p><h2 id="5、修改个人信息"><a href="#5、修改个人信息" class="headerlink" title="5、修改个人信息"></a>5、修改个人信息</h2><p><strong>关于我</strong> 的 界面里有  <strong>我的简历</strong>  ，修改路径在 <code>\source\about</code> 文件下，编辑 index.md  即可</p><p>到这里，博客的搭建工作就讲解的差不多了。最后修改完博客，别忘了记得 三连操作，上传博客。后面如果有添加的，我会不定期更新内容。希望大家也能搭建出自己的博客哦。</p><p>​    </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> technology </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
